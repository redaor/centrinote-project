#!/usr/bin/env node

/**
 * Script de setup tunnel HTTPS pour r√©soudre d√©finitivement l'erreur 4700 Zoom
 * G√©n√®re automatiquement les URLs tunnels et met √† jour la configuration
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PORT = 5174;
const ENV_TUNNEL_PATH = path.join(__dirname, '.env.tunnel');
const ENV_PATH = path.join(__dirname, '.env');

console.log('üöÄ SETUP TUNNEL HTTPS - R√âSOLUTION D√âFINITIVE ERREUR 4700');
console.log('=' .repeat(60));

// V√©rifier si ngrok est install√©
function checkNgrok() {
  return new Promise((resolve) => {
    const check = spawn('which', ['ngrok'], { stdio: 'ignore' });
    check.on('close', (code) => {
      resolve(code === 0);
    });
  });
}

// Installer ngrok si n√©cessaire
async function installNgrok() {
  console.log('üì¶ Installation de ngrok...');
  
  return new Promise((resolve, reject) => {
    // Tentative d'installation via npm
    const install = spawn('npm', ['install', '-g', '@ngrok/ngrok'], { 
      stdio: ['inherit', 'pipe', 'pipe'] 
    });
    
    install.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ ngrok install√© avec succ√®s');
        resolve(true);
      } else {
        console.log('‚ùå √âchec installation ngrok via npm');
        console.log('üí° Installez manuellement: npm install -g @ngrok/ngrok');
        console.log('üí° Ou via brew: brew install ngrok');
        reject(new Error('Installation ngrok √©chou√©e'));
      }
    });
  });
}

// Lancer ngrok et r√©cup√©rer l'URL
function startNgrok() {
  return new Promise((resolve, reject) => {
    console.log(`üåê Lancement du tunnel ngrok sur port ${PORT}...`);
    
    const ngrok = spawn('ngrok', ['http', PORT.toString(), '--log=stdout'], {
      stdio: ['inherit', 'pipe', 'pipe']
    });
    
    let ngrokUrl = null;
    let attempts = 0;
    const maxAttempts = 30; // 30 secondes max
    
    // Parser la sortie ngrok pour extraire l'URL
    ngrok.stdout.on('data', (data) => {
      const output = data.toString();
      console.log('üì° Ngrok:', output.trim());
      
      // Chercher l'URL HTTPS
      const httpsMatch = output.match(/https:\/\/[\w-]+\.ngrok[-\w]*\.io/);
      if (httpsMatch && !ngrokUrl) {
        ngrokUrl = httpsMatch[0];
        console.log(`‚úÖ Tunnel HTTPS √©tabli: ${ngrokUrl}`);
        resolve(ngrokUrl);
      }
    });
    
    ngrok.stderr.on('data', (data) => {
      const stderr = data.toString().trim();
      console.log('‚ö†Ô∏è Ngrok stderr:', stderr);
      
      // D√©tecter erreur d'authentification
      if (stderr.includes('ERR_NGROK_4018') || stderr.includes('authentication failed')) {
        console.log('\nüîê AUTHENTIFICATION NGROK REQUISE');
        console.log('=' .repeat(50));
        console.log('üìã √âtapes requises:');
        console.log('   1. Cr√©ez un compte gratuit: https://dashboard.ngrok.com/signup');
        console.log('   2. Obtenez votre authtoken: https://dashboard.ngrok.com/get-started/your-authtoken');
        console.log('   3. Configurez: ngrok authtoken YOUR_TOKEN_HERE');
        console.log('\nüí° Alternative: Utilisez localhost temporairement avec npm run dev');
        ngrok.kill();
        reject(new Error('Authentification ngrok requise'));
      }
    });
    
    ngrok.on('close', (code) => {
      if (code !== 0 && !ngrokUrl) {
        reject(new Error(`Ngrok ferm√© avec code ${code}`));
      }
    });
    
    // Timeout si ngrok ne d√©marre pas
    setTimeout(() => {
      if (!ngrokUrl) {
        ngrok.kill();
        reject(new Error('Timeout: ngrok n\'a pas fourni d\'URL dans les 30s'));
      }
    }, 30000);
  });
}

// Mettre √† jour le fichier .env avec l'URL tunnel
function updateEnvFile(tunnelUrl) {
  try {
    console.log(`üîß Mise √† jour configuration avec ${tunnelUrl}...`);
    
    // Lire le template .env.tunnel
    let envContent = fs.readFileSync(ENV_TUNNEL_PATH, 'utf8');
    
    // Remplacer les placeholders
    envContent = envContent.replace(/PLACEHOLDER_TUNNEL_URL/g, tunnelUrl.replace('https://', ''));
    envContent = envContent.replace(/https:\/\/([^/]+)/g, 'https://$1');
    
    // √âcrire le fichier .env final
    fs.writeFileSync(ENV_PATH, envContent);
    
    console.log('‚úÖ Configuration .env mise √† jour');
    
    // Afficher les informations importantes
    console.log('\nüéØ CONFIGURATION ZOOM MARKETPLACE REQUISE:');
    console.log('=' .repeat(50));
    console.log(`üìã Redirect URI √† configurer: ${tunnelUrl}/auth/callback`);
    console.log(`üìã App URL: ${tunnelUrl}`);
    console.log(`üìã Client ID: orVpgkFaS3SSsNfs_kagQw`);
    console.log('\nüåê URLs importantes:');
    console.log(`   ‚Ä¢ Interface test: ${tunnelUrl}/test-bff`);
    console.log(`   ‚Ä¢ Health check: ${tunnelUrl}/health`);
    console.log(`   ‚Ä¢ OAuth endpoint: ${tunnelUrl}/auth/zoom`);
    console.log('\n‚ö†Ô∏è  IMPORTANT: Configurez ces URLs dans Zoom Marketplace avant de tester !');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour .env:', error.message);
    return false;
  }
}

// D√©marrer le serveur avec la nouvelle configuration
function startServer() {
  console.log('\nüöÄ D√©marrage serveur avec configuration tunnel...');
  
  const server = spawn('node', ['server.js'], {
    stdio: 'inherit',
    env: { ...process.env, NODE_ENV: 'development' }
  });
  
  server.on('close', (code) => {
    console.log(`\n‚èπÔ∏è Serveur ferm√© avec code ${code}`);
    process.exit(code);
  });
  
  // G√©rer l'arr√™t propre
  process.on('SIGINT', () => {
    console.log('\nüõë Arr√™t du serveur...');
    server.kill('SIGINT');
  });
  
  return server;
}

// Fonction principale
async function main() {
  try {
    // V√©rifier ngrok
    const hasNgrok = await checkNgrok();
    
    if (!hasNgrok) {
      console.log('‚ùå ngrok non trouv√©');
      await installNgrok();
    }
    
    // Lancer le tunnel
    const tunnelUrl = await startNgrok();
    
    // Mettre √† jour la configuration
    const configUpdated = updateEnvFile(tunnelUrl);
    
    if (!configUpdated) {
      throw new Error('√âchec mise √† jour configuration');
    }
    
    console.log('\n‚úÖ Tunnel HTTPS configur√© avec succ√®s !');
    console.log('‚è≥ Le serveur va d√©marrer dans 3 secondes...');
    
    // Petite pause pour laisser le temps de lire
    setTimeout(() => {
      startServer();
    }, 3000);
    
  } catch (error) {
    console.error('\n‚ùå ERREUR SETUP TUNNEL:', error.message);
    
    if (error.message.includes('Authentification ngrok requise')) {
      console.log('\nüöÄ UTILISATION ALTERNATIVE SANS TUNNEL:');
      console.log('=' .repeat(50));
      console.log('   npm run dev  # D√©marre sur localhost');
      console.log('\n‚ö†Ô∏è ATTENTION: localhost peut causer erreur 4700 avec Zoom');
      console.log('üí° Pour test local uniquement, modifiez Zoom Marketplace:');
      console.log('   Redirect URI: http://localhost:5174/auth/callback');
    } else {
      console.log('\nüí° Solutions possibles:');
      console.log('   1. Installer ngrok: npm install -g @ngrok/ngrok');
      console.log('   2. Ou via brew: brew install ngrok');
      console.log('   3. V√©rifier la connexion internet');
    }
    
    process.exit(1);
  }
}

// Lancer si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}