#!/bin/bash

echo "üöÄ Configuration Cloudflare Tunnel - Remplacement ngrok"
echo "===================================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

section() {
    echo -e "${YELLOW}üìã $1${NC}"
}

section "√âTAPE 1: INSTALLATION CLOUDFLARED"

echo ""
info "Installation du client Cloudflare Tunnel..."

# D√©tecter l'OS et installer cloudflared
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    if command -v brew &> /dev/null; then
        info "Installation via Homebrew..."
        brew install cloudflared
    else
        warning "Homebrew non trouv√©. Installation manuelle requise."
        echo "T√©l√©chargez: https://github.com/cloudflare/cloudflared/releases"
        exit 1
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    info "Installation pour Linux..."
    curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
    sudo dpkg -i cloudflared.deb
    rm cloudflared.deb
else
    error "OS non support√©. Installation manuelle requise."
    exit 1
fi

# V√©rifier l'installation
if command -v cloudflared &> /dev/null; then
    success "Cloudflared install√© avec succ√®s"
    cloudflared --version
else
    error "√âchec de l'installation de cloudflared"
    exit 1
fi

echo ""
section "√âTAPE 2: AUTHENTIFICATION CLOUDFLARE"

echo ""
info "Lancement de l'authentification Cloudflare..."
info "Ceci va ouvrir votre navigateur pour vous connecter √† Cloudflare"
echo ""

cloudflared tunnel login

if [ $? -eq 0 ]; then
    success "Authentification r√©ussie"
else
    error "√âchec de l'authentification"
    exit 1
fi

echo ""
section "√âTAPE 3: CR√âATION DU TUNNEL"

echo ""
TUNNEL_NAME="centrinote-zoom-stable"
info "Cr√©ation du tunnel : $TUNNEL_NAME"

cloudflared tunnel create $TUNNEL_NAME

if [ $? -eq 0 ]; then
    success "Tunnel '$TUNNEL_NAME' cr√©√© avec succ√®s"
else
    warning "Le tunnel existe peut-√™tre d√©j√†. Continuons..."
fi

# Obtenir l'UUID du tunnel
TUNNEL_UUID=$(cloudflared tunnel list | grep $TUNNEL_NAME | awk '{print $1}')

if [ -z "$TUNNEL_UUID" ]; then
    error "Impossible de trouver l'UUID du tunnel"
    exit 1
fi

success "UUID du tunnel: $TUNNEL_UUID"

echo ""
section "√âTAPE 4: CONFIGURATION DNS"

echo ""
info "Configuration DNS pour le tunnel..."

# Choisir un sous-domaine (vous devrez avoir un domaine sur Cloudflare)
info "IMPORTANT: Vous devez avoir un domaine configur√© dans Cloudflare"
echo ""
echo "Exemples de domaines possibles:"
echo "  ‚Ä¢ centrinote-app.votre-domaine.com"
echo "  ‚Ä¢ zoom-app.votre-domaine.com"
echo "  ‚Ä¢ meetings.votre-domaine.com"
echo ""

read -p "Entrez votre domaine complet (ex: centrinote-app.example.com): " DOMAIN

if [ -z "$DOMAIN" ]; then
    error "Domaine requis"
    exit 1
fi

info "Configuration DNS pour : $DOMAIN"

cloudflared tunnel route dns $TUNNEL_NAME $DOMAIN

if [ $? -eq 0 ]; then
    success "DNS configur√© pour : https://$DOMAIN"
else
    error "√âchec de la configuration DNS"
    exit 1
fi

echo ""
section "√âTAPE 5: FICHIER DE CONFIGURATION"

echo ""
info "Cr√©ation du fichier de configuration..."

# Cr√©er le r√©pertoire de configuration
CONFIG_DIR="$HOME/.cloudflared"
mkdir -p $CONFIG_DIR

# Cr√©er le fichier de configuration
cat > $CONFIG_DIR/config.yml << EOF
tunnel: $TUNNEL_UUID
credentials-file: $CONFIG_DIR/${TUNNEL_UUID}.json

ingress:
  - hostname: $DOMAIN
    service: http://localhost:5174
  - service: http_status:404
EOF

success "Fichier de configuration cr√©√© : $CONFIG_DIR/config.yml"

echo ""
section "√âTAPE 6: MISE √Ä JOUR CONFIGURATION PROJET"

echo ""
info "Mise √† jour des fichiers de configuration du projet..."

# Sauvegarder l'ancienne config
cp .env .env.backup.ngrok.$(date +%Y%m%d_%H%M%S)
cp server/.env server/.env.backup.ngrok.$(date +%Y%m%d_%H%M%S)

success "Anciennes configurations sauvegard√©es"

# Mettre √† jour .env principal
sed -i.bak "s|https://unified-suitably-caribou.ngrok-free.app|https://$DOMAIN|g" .env
sed -i.bak "s|unified-suitably-caribou.ngrok-free.app|$DOMAIN|g" .env

# Mettre √† jour server/.env
sed -i.bak "s|https://unified-suitably-caribou.ngrok-free.app|https://$DOMAIN|g" server/.env
sed -i.bak "s|unified-suitably-caribou.ngrok-free.app|$DOMAIN|g" server/.env

# Nettoyer les fichiers de sauvegarde temporaires
rm -f .env.bak server/.env.bak

success "Configuration du projet mise √† jour avec : https://$DOMAIN"

echo ""
section "√âTAPE 7: SCRIPTS DE D√âMARRAGE"

# Cr√©er script de d√©marrage
cat > start-cloudflare-tunnel.sh << 'EOF'
#!/bin/bash

echo "üöÄ D√©marrage Cloudflare Tunnel..."

# V√©rifier que cloudflared est install√©
if ! command -v cloudflared &> /dev/null; then
    echo "‚ùå cloudflared n'est pas install√©"
    exit 1
fi

# D√©marrer le tunnel
echo "üì° Connexion du tunnel..."
cloudflared tunnel run

echo "‚úÖ Tunnel d√©marr√© avec succ√®s"
EOF

chmod +x start-cloudflare-tunnel.sh

# Cr√©er script complet de d√©marrage
cat > start-stable-dev.sh << 'EOF'
#!/bin/bash

echo "üöÄ D√©marrage Environnement Stable (Cloudflare Tunnel)"
echo "=================================================="

# Fonction pour tuer les processus en cours
cleanup() {
    echo "üõë Arr√™t des services..."
    pkill -f "cloudflared"
    pkill -f "node.*server"
    pkill -f "vite"
    exit 0
}

trap cleanup SIGINT SIGTERM

# D√©marrer le tunnel Cloudflare en arri√®re-plan
echo "üì° D√©marrage Cloudflare Tunnel..."
cloudflared tunnel run &
TUNNEL_PID=$!

# Attendre que le tunnel soit pr√™t
sleep 3

# D√©marrer le backend
echo "üñ•Ô∏è  D√©marrage Backend (port 5174)..."
cd server && npm start &
BACKEND_PID=$!

# Attendre que le backend soit pr√™t
sleep 3

# D√©marrer le frontend
echo "üåê D√©marrage Frontend..."
cd .. && npm run dev &
FRONTEND_PID=$!

echo ""
echo "‚úÖ Tous les services sont d√©marr√©s !"
echo "üì± Application accessible sur votre domaine Cloudflare"
echo "üõë Appuyez sur Ctrl+C pour arr√™ter tous les services"
echo ""

# Attendre que l'utilisateur arr√™te
wait
EOF

chmod +x start-stable-dev.sh

success "Scripts de d√©marrage cr√©√©s :"
echo "   ‚Üí start-cloudflare-tunnel.sh (tunnel seul)"
echo "   ‚Üí start-stable-dev.sh (environnement complet)"

echo ""
section "CONFIGURATION ZOOM MARKETPLACE"

echo ""
warning "IMPORTANT : Mise √† jour requise dans Zoom Marketplace"
echo ""
echo "üìã Connectez-vous √† : https://marketplace.zoom.us/"
echo "üìù Modifiez votre OAuth App avec :"
echo ""
echo "   üîó Redirect URI: https://$DOMAIN/auth/callback"
echo "   üåê App URL: https://$DOMAIN"
echo "   üì± Domain: $DOMAIN"
echo ""

section "√âTAPE 8: TEST DE LA CONFIGURATION"

echo ""
info "Test de la configuration..."

# V√©rifier que les fichiers ont √©t√© mis √† jour
if grep -q "$DOMAIN" .env; then
    success "Fichier .env mis √† jour"
else
    error "√âchec mise √† jour .env"
fi

if grep -q "$DOMAIN" server/.env; then
    success "Fichier server/.env mis √† jour"
else
    error "√âchec mise √† jour server/.env"
fi

echo ""
section "R√âSUM√â DE LA CONFIGURATION"

echo ""
success "üéØ TUNNEL CLOUDFLARE CONFIGUR√â"
echo "   ‚Üí Nom: $TUNNEL_NAME"
echo "   ‚Üí UUID: $TUNNEL_UUID"
echo "   ‚Üí Domaine: https://$DOMAIN"
echo ""

success "üìÅ FICHIERS MODIFI√âS"
echo "   ‚Üí .env (URLs mises √† jour)"
echo "   ‚Üí server/.env (URLs mises √† jour)"
echo "   ‚Üí ~/.cloudflared/config.yml (configuration tunnel)"
echo ""

success "üöÄ SCRIPTS CR√â√âS"
echo "   ‚Üí start-cloudflare-tunnel.sh"
echo "   ‚Üí start-stable-dev.sh"
echo ""

section "PROCHAINES √âTAPES"

echo ""
echo "1Ô∏è‚É£  Mettre √† jour Zoom Marketplace :"
echo "   https://marketplace.zoom.us/"
echo "   Redirect URI: https://$DOMAIN/auth/callback"
echo ""
echo "2Ô∏è‚É£  D√©marrer l'environnement :"
echo "   ./start-stable-dev.sh"
echo ""
echo "3Ô∏è‚É£  Tester l'application :"
echo "   https://$DOMAIN"
echo ""

success "üéâ CONFIGURATION CLOUDFLARE TUNNEL TERMIN√âE !"
echo "üîí Votre URL est maintenant FIXE et ne changera JAMAIS !"
echo "‚úÖ Fini les erreurs 4700 dues aux URLs qui changent !"

# Sauvegarder l'URL pour r√©f√©rence
echo "CLOUDFLARE_DOMAIN=https://$DOMAIN" > .cloudflare-config
echo "TUNNEL_NAME=$TUNNEL_NAME" >> .cloudflare-config
echo "TUNNEL_UUID=$TUNNEL_UUID" >> .cloudflare-config

info "Configuration sauvegard√©e dans .cloudflare-config"